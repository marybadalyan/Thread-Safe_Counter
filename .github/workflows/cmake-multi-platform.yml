name: Build and Test with TSan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- JOB 1: Build and run on Windows using the default MSVC compiler ---
  build_windows:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Configure CMake
      # This will use the default MSVC compiler. We'll use a Debug build.
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug .

    - name: Build
      # The --config flag is needed for multi-config generators like Visual Studio
      run: cmake --build build --config Debug

    - name: Run on Windows (Expect Success)
      # This step should succeed, as TSan is not active for MSVC.
      # The executable for Visual Studio generators is inside a subdirectory named after the build type.
      # NOTE: Replace 'YourAppName' with your actual executable name!
      run: ./build/Debug/main.exe --threads 4 --iterations 500000


  # --- JOB 2: Build and run on Linux with GCC and ThreadSanitizer ---
  build_linux_with_tsan:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Configure CMake
      # This will use the default GCC compiler. Your CMakeLists.txt should add
      # the TSan flags automatically for this compiler in a Debug build.
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug .

    - name: Build
      run: cmake --build build --config Debug

    - name: Run with TSan (Expect Failure)
      # This step SHOULD FAIL. A failure here means TSan is working correctly!
      # The executable for single-config generators is directly in the build folder.
      # NOTE: Replace 'YourAppName' with your actual executable name!
      run: ./build/main --threads 4 --iterations 500000